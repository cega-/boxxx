*~~~~
*~ Boxxx Portal
*~~~~

apt-get install python python-dev python-pip

pip install bottle
Download https://github.com/bottlepy/bottle/raw/master/bottle.py
Replace bottle.py install with PIP by the download previously

pip install beaker
pip install cheroot
pip install jinja2
pip install setproctitle


apt-get install curl
curl -sL https://deb.nodesource.com/setup_8.x | bash -
apt-get install gcc g++ make nodejs
npm install request cheerio nightmare fs
npm install -g browserify
npm install handlebars
get http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.runtime-v*.*.*.js
and put in web/js/lib

In webworker_test.js
const cheerio = require('cheerio')

Browserify WebWorker to include Cheerio inside :
browserify web/js/webworker_test.js -o web/js/webworker_test_bundle.js

L'appel du worker se fait donc Ã  ce moment la avec l'appel du bundle
const worker = new Worker('/web/js/webworker_test_bundle.js');

Put nom_du_template in git/web/handle_tpl/
/root/boxxx/node_modules/handlebars/bin/handlebars -m git/web/handle_tpl/nom_du_template.handlebars -f web/js/templates/nom_du_template.js

<script src="web/js/lib/handlebars.runtime-v4.0.11.js"></script>
<script src="web/js/templates/nom_du_template.js"></script>
<script src="web/js/widgets/widget_nom_du_template.js"></script>

Inside page_dest_template_content.js :
var context = {title: "My New Post", body: "This is my first post!"};
var template = Handlebars.templates['nom_du_template'];
var html = template(context);

Pour l'interrogation des pages Web depuis lesquelles on recupere les data, il faut prendre en compte la problematique de CORS
https://github.com/Rob--W/cors-anywhere/
https://gist.github.com/jesperorb/6ca596217c8dfba237744966c2b5ab1e
ou
Faire un serveur dedie pour faire office de proxy

*~~~~
*~ Boxxx Plugin
*~~~~

To install an extension temporarily:

    open Firefox
    enter "about:debugging" in the URL bar
    click "Load Temporary Add-on"
    open the extension's directory and select any file inside the extension.



*~~~~
*~ DNS Server Side
*~~~~

root@nepi-vtu19.neuilly.ratp

apt-get install pdns-server
apt-get install pdns-backend-mysql
apt-get install mysql-server
apt-get install libprotobuf-dev
apt-get install python python-pip

!!! recursor and server can't be launch on same server because they use same port
!!! change port of server if you want to
apt-get install pdns-recursor

pip install mysql-connector

If needed, because Pdns install didn't do that, you have to create manually PDNS Database : 
- On MySQL CLI
- CREATE DATABASE 'pdns';
- CREATE USER 'pdns'@localhost IDENTIFIED BY 'pdns-tgbyhn89?M';
- GRANT ALL PRIVILEGES ON pdns.* TO 'pdns'@localhost IDENTIFIED BY 'pdns-tgbyhn89?M';
- Check PDNS version to import correct database schema (https://doc.powerdns.com/authoritative/guides/basic-database.html)
- Import database struct
- FLUSH PRIVILEGES;
- Good to go

In pdns.conf :
launch=gmysql
gmysql-host=localhost
gmysql-port=3306
gmysql-dbname=pdns
gmysql-user=pdns
gmysql-password=pdns-tgbyhn89?M
gmysql-dnssec=yes

MySQL root pass = tgbyhn89?M
MySQL pdns pass = pdns-tgbyhn89?M

Poweradmin WebUI 
"admin" and password "pdns-tgbyhn89?M"

user = u_pdns
pass = u_pdns_pass

SHOW databases;
USE pdns;

CREATE TABLE domains_tmp (
  id                    INT AUTO_INCREMENT,
  name                  VARCHAR(255) NOT NULL,
  master                VARCHAR(128) DEFAULT NULL,
  last_check            INT DEFAULT NULL,
  type                  VARCHAR(6) NOT NULL,
  notified_serial       INT DEFAULT NULL,
  account               VARCHAR(40) DEFAULT NULL,
  PRIMARY KEY (id)
) Engine=InnoDB;

CREATE UNIQUE INDEX name_index ON domains_tmp(name);

SELECT dt.name from domains dt
LEFT JOIN domains d
ON dt.name = d.name
WHERE d.name IS NULL;

mysql> INSERT INTO domains (name, type) values ('example.lan', 'NATIVE');

INSERT INTO records (domain_id, name, content, type,ttl,prio)
VALUES (1,'example.lan','188.108.5.119 empty.empty 1 3600 600 604800 3600','SOA',86400,NULL);

INSERT INTO records (domain_id, name, content, type,ttl,prio)
VALUES (1,'example.lan','188.108.5.119','NS',86400,NULL);

INSERT INTO records (domain_id, name, content, type,ttl,prio)
VALUES (1,'www.example.lan','192.0.2.10','A',120,NULL);

INSERT INTO records (domain_id, name, content, type,ttl,prio)
VALUES (1,'*.example.lan','192.0.2.42','A',120,NULL);

In pdns.conf allow-recursion for LAN Subnet only (ie. 192.168.42.0/24, all with 0.0.0.0/0 and IPv6 ::/0)
In pdns.conf recursor put DNS recursor which take care of all request the master can't (usually local powerdns in recursor mode on port 54 : recursor=192.168.1.2:54)
In recursor.conf put port=54
In recursor.conf put forward-zone for LAN domain and other for everything else (lan=192.168.42.1, .=8.8.8.8)
In recursor.conf, if needed, put forward-zone-recurse everything else statement dispite of forward-zone(.=8.8.8.8 and IPv6 DNS Server 2001:4860:4860::8888 : lan=192.168.1.10, .=2001:4860:4860::8888;8.8.8.8)

But according to https://doc.powerdns.com/authoritative/guides/recursion.html
New configuration should be : 
In pdns.conf :
local-address=127.0.0.1
local-ipv6=::1
local-port=54

In recursor.conf :
forward-zones=lan=192.168.1.10, .=127.0.0.1:54;2001:4860:4860::8888;8.8.8.8
forward-zones-recurse=lan=192.168.1.10, cega.ovh=192.168.1.10, .=127.0.0.1:54;2001:4860:4860::8888;8.8.8.8
local-address=0.0.0.0
local-port=53

#####
## Boxxx Firewall redirect
#####

modprobe br_netfilter

echo 1 > /proc/sys/net/ipv4/ip_forward
or
In /etc/sysctl.conf
Put IP Forward, net.ipv4.ip_forward=1

In /etc/sysctl.conf, add:
#Do not consider loopback addresses as martian source or destination
#while routing. This enables the use of 127/8 for local routing purposes.
#default FALSE
net.ipv4.conf.all.route_localnet=1
(source:https://hauweele.net/~gawen/blog/?tag=route_localnet)

iptables -L -n -v -t nat
iptables -L -n -v
iptables -F -t nat
iptables -F

iptables -t nat -A POSTROUTING -j MASQUERADE
iptables -t nat -A PREROUTING -p tcp -m tcp --dport 53 -m physdev --physdev-in eth1 -j DNAT --to-destination 192.168.40.12:53
iptables -t nat -A PREROUTING -p udp -m udp --dport 53 -m physdev --physdev-in eth1 -j DNAT --to-destination 192.168.40.12:53


echo 1 > /proc/sys/net/ipv6/conf/default/forwarding
echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
or
In /etc/sysctl.conf
Put IP Forward, net.ipv6.all.ip_forward=1

ip6tables -L -n -v -t nat
ip6tables -L -n -v
ip6tables -F -t nat
ip6tables -F

ip6tables -t nat -A POSTROUTING -j MASQUERADE
ip6tables -t nat -A PREROUTING -p tcp -m tcp --dport 53 -m physdev --physdev-in eth1 -j DNAT --to-destination [::1]:53
ip6tables -t nat -A PREROUTING -p udp -m udp --dport 53 -m physdev --physdev-in eth1 -j DNAT --to-destination [::1]:53

To make iptables rules persistent and available at boot
apt-get install iptables-persistent
iptables-save > /etc/iptables/rules.v4
ip6tables-save > /etc/iptables/rules.v6

############
## Translate and Template
############

xgettext -L Python -d gettext_example -o gettext_example.pot test_i18n.py

cp gettext_example.pot translation/fr/LC_MESSAGES/gettext_example.po

edit .po file

msgfmt -o translation/fr/LC_MESSAGES/gettext_example.mo translation/fr/LC_MESSAGES/gettext_example.po

{% extends "im_frame.tpl" %}

	{% block menu %}
		{% include 'im_menu.tpl' %}
	{% endblock menu %}
	{% block container %}

<textarea id="use_template_list" name="use_template_list" style="display:none">
{{ use_template_list }}
</textarea>
<textarea id="parents_list" name="parents_list" style="display:none">
{{ parents_list }}
</textarea>
<textarea id="group_list" name="group_list" style="display:none">
{{ group_list }}
</textarea>
<textarea id="supervisor_name_arg" name="supervisor_name_arg" style="display:none">
{{ supervisor_name_arg }}
</textarea>

<input id="addtype" type="hidden" name="addtype" value="{{ addtype }}" />
<input id="oid" type="hidden" name="oid" value="{{ oid }}" />
<input id="conf_filepath" type="hidden" name="conf_filepath" value="{{ conf_filepath }}" />

<div id="page-wrapper">
            <div class="row">
                <div class="col-lg-12">
                    <h1 class="page-header">{{ _('Host definition for : ') }}{{ page_header_name }}</h1>
                </div>
                <!-- /.col-lg-12 -->
            </div>
            <!-- /.row -->
            <div class="row">
                <div class="col-lg-12">

                    <!-- /.panel -->
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-desktop fa-fw"></i> {{ _('Host info') }}
                        </div>
                        <!-- /.panel-heading -->
                        <div class="panel-body">
